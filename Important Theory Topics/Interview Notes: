Interview Notes:

IOS Topics

Autolayouts
UI - Beizer Path and Masking.  // what is masking
Closures
Delegates
Protocols
Extensions
App Thining
Initializers
Atomic Nonatomic
Class Vs Structure
gettable or gettable and settable properties
Stored and computed properties 
Lazy variables
Static property  / class property also functions
Generics
IBOutlets


Design Patterns
Singleton


Threading
Main thread
Thread Safe Stack
Thread Safety

CLLocation
Notifications
ABI Stability
Static Vs Dynamic Lib

Test Cases

Swift Compiler
Apple provisioning profiles, certificates, push certificates, how to push app live , TestFlight



Oops
SOLID principles
MVVM design pattern
Viper
Coordinator

Design Questions - youtube & interViewBit
https://www.interviewbit.com/system-design-interview-questions/

12:43
Doubts

Struct inside a framework
NSCopyProtocol
Alamofire why ?
Main diff -> GCD / Operation Queue
Method dispatch ?
Generics / Associated type
SOLID
Error
Dependency Injection
PODs / Carthage
Design Patterns
Implement NSCache
Data Bindings
Instance var/ property



read core data 
design questions
IBoutlets weak
swift 5



Authentication
SSL 
Auth1 
Auth2




Points to remember :

 Dict : You cant give a custom class as key because for dict it generates a hash value to calculate index to store the value so custom class needs to implement hashable

COW: Copy on write works on some collections by Apple. For your custom class it needs to be implemented.

Thread Safe Array : 

Sync write tasks
Async read tasks



Deep copies are less prone to race conditions and suits well in multithreaded environment. You are sure the object on which you are performing changes will impact only same object. It will not make any impact on the source object. This is one of the reason also why apple have made collection types (Array, Dictionary, Set) as value types in Swift (which are reference types in Objective C).

Shallow copies are faster to create because sharing the reference only.


Next is usage. While CocoaPods is pretty easy to use, Carthage is more flexible. CocoaPods creates a .xcworkspace file in which all your pods are listed. This makes it easier to use, but also less error proof. If one library fails to build, your whole project doesn't work. In Carthage you have to add the frameworks you really want to use into your project manually. This means you have to do some extra work, but it also adds a lot more flexibility. Also if you want to get rid off Carthage, you just have to delete the Cartfile and Cartfile.resolved files and the Carthage folder. I couldn't find such an elegant solution for CocoaPods. First of all you have to delete the .xcworkspace, the Podfile and Podfile.lock files, the Pods folder and a bunch of other stuff inside Xcode.
The only downside I found about Carthage is that not all frameworks are available for Carthage. Especially older frameworks aren't available for Carthage, and if you don't want to use CocoaPods for them you have to add those manually. Just run terminal and run 'git submodule add (link to framework)'.

 It enables binary compatibility between applications and libraries compiled with different Swift versions.
Earlier, Swift was not ABI stable, so each binary was bundling its own version of the Swift Dynamic Library. If you open an .ipa you can find swift standard libraries (.dylib) in SwiftSupport or Frameworks.



NSCache works exactly like mutable dictionary with one major difference: iOS will automatically remove objects from the cache if the device is running low on memory. And also here it will only prune the least recently used objects first. Achieveing the same from Dictionary is somewhat tricky.
One more thing about NSCache is, it is thread safe. We can access it from any thread without worrying about managing threads while accessing NSCache.


Questions to clarify from aneri

what is masking?
IBOutlets?? Kehna kya chalet ho

Doubts	

Why canâ€™t we pass objective c struct in swift.
Diinitializers in cases but not in struct
=== operator
Dynamic Member Lookup ??
 how does atomic nonatomoc feature works  in swift?
 when does a escaping closure gets removed from memory?


Links : 

https://www.uraimo.com/2016/10/27/unowned-or-weak-lifetime-and-performance/
https://stackoverflow.com/questions/7057934/property-vs-instance-variable
https://medium.com/@suragch/frame-vs-bounds-in-ios-107990ad53ee
https://heartbeat.fritz.ai/memory-management-in-swift-heaps-stacks-baa755abe16a
https://medium.com/flawless-app-stories/how-to-use-a-model-view-viewmodel-architecture-for-ios-46963c67be1b
https://medium.com/@stremsdoerfer
https://medium.com/@abhimuralidharan/error-handling-in-swift-d0a618499910
https://medium.com/@JoyceMatos/dependency-injection-in-swift-87c748a167be
https://medium.com/ios-expert-series-or-interview-series/solid-design-principle-using-swift-34bb1731cfb3
https://medium.com/pharos-production/swift-in-production-method-dispatch-mechanisms-d5f70784f516
https://medium.com/@vikasdalvi.29/multitasking-in-ios-using-gcd-b931885a719e
https://medium.com/@abhimuralidharan/functional-swift-all-about-closures-310bc8af31dd
https://medium.com/@PhiJay/the-auto-layout-comprehendium-%EF%B8%8F-6d7e2105bf70
https://medium.com/swift2go/rxswift-part-2-working-with-subjects-34e35a058a2c
https://medium.com/fantageek/rxswift-subjects-part1-publishsubjects-103ff6b06932
https://marcosantadev.com/solid-principles-applied-swift/
http://tech.gc.com/demystifying-ios-layout/
https://medium.com/@itchyankles/memory-management-in-rust-and-swift-8ecda3cdf5b7
https://medium.com/@leandromperez/bidirectional-associations-using-value-types-in-swift-548840734047
https://www.mikeash.com/pyblog/friday-qa-2015-07-17-when-to-use-swift-structs-and-classes.html
https://medium.com/ios-expert-series-or-interview-series/auto-layout-cycle-in-ios-the-layout-cycle-18704d5a4ff7
https://www.appcoda.com/memory-management-swift/
https://medium.com/@abhishek1nacc/atomic-nonatomic-retain-assign-copy-582b79d31568
https://oleb.net/blog/2014/04/understanding-uiscrollview/
https://medium.com/@smalam119/viper-design-pattern-for-ios-application-development-7a9703902af6
https://medium.com/@abhimuralidharan/swift-3-0-1-access-control-9e71d641a56c
https://medium.com/@ankur.s20/implementing-app-thinning-in-your-project-step-by-step-tutorial-ios-app-b3cfd139896d
https://medium.com/@abhimuralidharan/universal-links-in-ios-79c4ee038272
https://medium.com/swift2go/using-dispatch-group-semaphore-to-group-ios-async-tasks-alfian-losari-81335fa6e92e
https://medium.com/swiftly-swift/a-quick-look-at-semaphores-6b7b85233ddb
https://medium.com/@roykronenfeld/semaphores-in-swift-e296ea80f860
https://medium.com/@oyalhi/dispatch-barriers-in-swift-3-6c4a295215d6
https://gist.github.com/basememara/afaae5310a6a6b97bdcdbe4c2fdcd0c6
